load("C:/Users/steph/OneDrive/Desktop/covid/covid-19-modeling/Workspace2020-04-25-1587832621.RData")
load("C:/Users/steph/OneDrive/Desktop/covid/covid-19-modeling/Archiving/3-28-20/Workspace2020-03-28-1585451908.RData")
# these are the libraries that build the figures
library(ggplot2)
library(plotly)
library(plyr)
library(readr)
library(deSolve)
# these are the libraries that keep the dashboard running
library(flexdashboard)
library (shiny)
# Load the model runs and data
# source('SLIRmodelfunctions.R') #these will load with the workspace
# load('Workspace2020-03-29-1585524251.RData') # (I know, it's really dumb to do this with a workspace, will update later... - M)
# load('Workspace2020-03-30-1585615780.RData')
# load('Workspace2020-03-31-1585712672.Rdata')
# load('Workspace2020-04-01-1585798536.Rdata')
# load("Workspace2020-04-02-1585886267.RData")
# load("Workspace2020-04-04-1585979196.RData")
# load('Workspace2020-04-04-1586051898.RData')
# load('Workspace2020-04-05-1586137470.RData') # fit k only, cases only
# load('Workspace2020-04-05-1586140700.Rdata') # fit k & rD, cases & deaths--from here on---
# load('Workspace2020-04-06-1586230356.Rdata')
# load('Workspace2020-04-07-1586314132.RData')
# load('Workspace2020-04-09-1586440876-bbound.RData') # add in fitting beta but with some (very wide...) bounds: 1.25 - 9
# load('Workspace2020-04-09-1586483717.RData')
# load('Workspace2020-04-13-1586752668.RData')
# load('Workspace2020-04-17-1587174780.RData')
# load('Workspace2020-04-17-1587177591.RData') # new IC bounds---we may want to/be able to fit the ICs now?
# load('Workspace2020-04-21-1587444068.RData')
# load('Workspace2020-04-23-1587697340.RData')
load('Workspace2020-04-25-1587832621.RData')
# these are the libraries that build the figures
library(ggplot2)
library(plotly)
library(plyr)
library(readr)
library(deSolve)
# these are the libraries that keep the dashboard running
library(flexdashboard)
library (shiny)
# Load the model runs and data
# source('SLIRmodelfunctions.R') #these will load with the workspace
# load('Workspace2020-03-29-1585524251.RData') # (I know, it's really dumb to do this with a workspace, will update later... - M)
# load('Workspace2020-03-30-1585615780.RData')
# load('Workspace2020-03-31-1585712672.Rdata')
# load('Workspace2020-04-01-1585798536.Rdata')
# load("Workspace2020-04-02-1585886267.RData")
# load("Workspace2020-04-04-1585979196.RData")
# load('Workspace2020-04-04-1586051898.RData')
# load('Workspace2020-04-05-1586137470.RData') # fit k only, cases only
# load('Workspace2020-04-05-1586140700.Rdata') # fit k & rD, cases & deaths--from here on---
# load('Workspace2020-04-06-1586230356.Rdata')
# load('Workspace2020-04-07-1586314132.RData')
# load('Workspace2020-04-09-1586440876-bbound.RData') # add in fitting beta but with some (very wide...) bounds: 1.25 - 9
# load('Workspace2020-04-09-1586483717.RData')
# load('Workspace2020-04-13-1586752668.RData')
# load('Workspace2020-04-17-1587174780.RData')
# load('Workspace2020-04-17-1587177591.RData') # new IC bounds---we may want to/be able to fit the ICs now?
# load('Workspace2020-04-21-1587444068.RData')
# load('Workspace2020-04-23-1587697340.RData')
load('Workspace2020-04-25-1587832621.RData')
# Convert times to date format for convenience
dates = startdate + ftimes
casedates = startdate + times
lastdate = tail(casedates,1)
# MI web data - cumulative deaths - no longer need to load since it comes in the workspace
# deathdata = read_csv("~/Box Sync/COVID Response Modeling/Data - Web/MIcumdeath_by_hand.csv")
# deathtimes =  as.Date(deathdata$Date, format="%m/%d/%y") #deathdata$Date # as.numeric(deathdata$Date - startdate)
# deaths = deathdata$Total
# Turn off scientific notation on all axes
options(scipen=999)
# Convert dates from ggplot numeric to plotly numeric
dt = function(dates){as.numeric(as.POSIXct(dates))*1000}
# these are the libraries that build the figures
library(ggplot2)
library(plotly)
library(plyr)
library(readr)
library(deSolve)
# these are the libraries that keep the dashboard running
library(flexdashboard)
library (shiny)
# Load the model runs and data
load('Workspace2020-04-25-1587832621.RData')
# Convert times to date format for convenience
dates = startdate + ftimes
casedates = startdate + times
lastdate = tail(casedates,1)
# Turn off scientific notation on all axes
options(scipen=999)
# Convert dates from ggplot numeric to plotly numeric
dt = function(dates){as.numeric(as.POSIXct(dates))*1000}
forecasttable = c()
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+7, "%B %e"),'(1 week)'),
format(round_any(ymin[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 7) - startdate + 1],1), scientific=F),
# format(round_any(ymed[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 7) - startdate + 1],1), scientific=F) ) )
# these are the libraries that build the figures
library(ggplot2)
library(plotly)
library(plyr)
library(readr)
library(deSolve)
# these are the libraries that keep the dashboard running
library(flexdashboard)
library (shiny)
# Load the model runs and data
load('Workspace2020-04-25-1587832621.RData')
# Convert times to date format for convenience
dates = startdate + ftimes
casedates = startdate + times
lastdate = tail(casedates,1)
# Turn off scientific notation on all axes
options(scipen=999)
# Convert dates from ggplot numeric to plotly numeric
dt = function(dates){as.numeric(as.POSIXct(dates))*1000}
#Calculate bounds
index= likesample<quantile(likesample,0.95)
ymin = apply(yobsincsample[,index], 1, min)
ymax = apply(yobsincsample[,index], 1, max)
ymed = apply(yobsincsample[,index], 1, median)
deathmin = apply(yobsdeathsample[,index], 1, min)
deathmax = apply(yobsdeathsample[,index], 1, max)
deathmed = apply(yobsdeathsample[,index], 1, median)
ICUmin = apply(ycurrICUsample[,index], 1, min)
ICUmax = apply(ycurrICUsample[,index], 1, max)
ICUmed = apply(ycurrICUsample[,index], 1, median)
O2min = apply(ycurrO2sample[,index], 1, min)
O2max = apply(ycurrO2sample[,index], 1, max)
O2med = apply(ycurrO2sample[,index], 1, median)
patmin = apply(ycurrpatsample[,index], 1, min)
patmax = apply(ycurrpatsample[,index], 1, max)
patmed = apply(ycurrpatsample[,index], 1, median)
ventmin = apply(ycurrventsample[,index], 1, min)
ventmax = apply(ycurrventsample[,index], 1, max)
ventmed = apply(ycurrventsample[,index], 1, median)
xestlh = ode(x0(paramestslh), ftimes, CoVode, paramestslh)
forecasttable = c()
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+7, "%B %e"),'(1 week)'),
format(round_any(ymin[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 7) - startdate + 1],1), scientific=F),
# format(round_any(ymed[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 7) - startdate + 1],1), scientific=F) ) )
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+21, "%B %e"),'(3 weeks)'),
format(round_any(ymin[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 21) - startdate + 1],1), scientific=F),
# format(round_any(ymed[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 21) - startdate + 1],1), scientific=F) ) )
forecasttable = as.data.frame(forecasttable)
# colnames(forecasttable) = c("Date", "Uncertainty lower bound", "Best-fit", "Median", "Uncertainty upper bound")
colnames(forecasttable) = c("Date", "Uncertainty lower bound", "Best-fit", "Uncertainty upper bound")
knitr::kable(forecasttable)
# these are the libraries that build the figures
library(ggplot2)
library(plotly)
library(plyr)
library(readr)
library(deSolve)
# these are the libraries that keep the dashboard running
library(flexdashboard)
library (shiny)
# Load the model runs and data (workspace needs to be updated every time)
load('Workspace2020-04-25-1587832621.RData')
# Convert times to date format for convenience
dates = startdate + ftimes
casedates = startdate + times
lastdate = tail(casedates,1)
# Turn off scientific notation on all axes
options(scipen=999)
# Convert dates from ggplot numeric to plotly numeric
dt = function(dates){as.numeric(as.POSIXct(dates))*1000}
#Calculate bounds
index= likesample<quantile(likesample,0.95)
ymin = apply(yobsincsample[,index], 1, min)
ymax = apply(yobsincsample[,index], 1, max)
ymed = apply(yobsincsample[,index], 1, median)
deathmin = apply(yobsdeathsample[,index], 1, min)
deathmax = apply(yobsdeathsample[,index], 1, max)
deathmed = apply(yobsdeathsample[,index], 1, median)
ICUmin = apply(ycurrICUsample[,index], 1, min)
ICUmax = apply(ycurrICUsample[,index], 1, max)
ICUmed = apply(ycurrICUsample[,index], 1, median)
O2min = apply(ycurrO2sample[,index], 1, min)
O2max = apply(ycurrO2sample[,index], 1, max)
O2med = apply(ycurrO2sample[,index], 1, median)
patmin = apply(ycurrpatsample[,index], 1, min)
patmax = apply(ycurrpatsample[,index], 1, max)
patmed = apply(ycurrpatsample[,index], 1, median)
ventmin = apply(ycurrventsample[,index], 1, min)
ventmax = apply(ycurrventsample[,index], 1, max)
ventmed = apply(ycurrventsample[,index], 1, median)
xestlh = ode(x0(paramestslh), ftimes, CoVode, paramestslh)
forecasttable = c()
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+7, "%B %e"),'(1 week)'),
format(round_any(ymin[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 7) - startdate + 1],1), scientific=F) ) )
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+21, "%B %e"),'(3 weeks)'),
format(round_any(ymin[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 21) - startdate + 1],1), scientific=F) ) )
forecasttable = as.data.frame(forecasttable)
colnames(forecasttable) = c("Date", "Uncertainty lower bound", "Best-fit", "Uncertainty upper bound")
knitr::kable(forecasttable)
# Detected/observed cumulative incidence
end = (lastdate + 7) - startdate + 1
ybestfit = yobscumcarefun(xestlh,paramestslh)
plotdata = data.frame(dates[1:end],dt(dates[1:end]),ybestfit[1:end],ymed[1:end],ymin[1:end],ymax[1:end],
c(casedates, rep(NA, length(ftimes[1:end]) - length(casedates))),
dt(c(casedates, rep(NA, length(ftimes[1:end]) - length(casedates)))),
c(cases, rep(NA, length(ftimes[1:end]) - length(casedates))) )
colnames(plotdata) = cbind("Date","NumericDate","BestFit","Median","Min","Max","CDates","NumericCDates","Cases")
forecastplot = ggplot(plotdata) +
geom_line(aes(x=NumericDate,y=BestFit, text = paste("Date:",Date,"<br>Best fit:",round(BestFit)), group=1,
linetype = "Best fit")) +
geom_line(aes(x=NumericDate,y=Median, text = paste("Date:",Date,"<br>Median:",round(Median)), group=1,
linetype = "Median")) +
geom_ribbon(aes(ymin=Min, ymax=Max, x=NumericDate,
text = paste("Date:",Date,"<br>Min:",round(Min),"<br>Max:",round(Max)), group=1),
alpha = 0.3) +
geom_point(aes(x=NumericCDates, y=Cases, text = paste("Date:",Date,"<br>Cases:",round(Cases))  )) +
guides(fill = guide_legend(''), colour = guide_legend(''), linetype = guide_legend('')) +
labs(x="Date", y="Cumulative Lab-Confirmed Cases") #+ theme_bw() #+ theme_classic()
ggplotly(forecastplot,tooltip = c("text")) %>%
layout(legend = list(x = 0.05, y = 0.9,
orientation = "h"),
xaxis = list(
type = 'date',
tickformat = "%b %d"
)
)
end = (lastdate + 21) - startdate + 1
deathsbestfit = yobscumdeathfun(xestlh,paramestslh)
plotdata = data.frame(dates[1:end],dt(dates[1:end]),deathsbestfit[1:end],deathmed[1:end],deathmin[1:end],deathmax[1:end],
c(deathtimes, rep(NA, length(ftimes[1:end]) - length(deathtimes))),
dt(c(deathtimes, rep(NA, length(ftimes[1:end]) - length(deathtimes)))),
c(deaths, rep(NA, length(ftimes[1:end]) - length(deathtimes))) )
colnames(plotdata) = cbind("Date","NumericDate","BestFit","Median","Min","Max","DDates","NumericDDates","Deaths")
# Detected/observed deaths
deathplot = ggplot(plotdata) +
geom_line(aes(x=NumericDate,y=BestFit, text = paste("Date:",Date,"<br>Best fit:",round(BestFit)), group=1,
linetype = "Best fit")) +
geom_line(aes(x=NumericDate,y=Median, text = paste("Date:",Date,"<br>Median:",round(Median)), group=1,
linetype = "Median")) +
geom_ribbon(aes(ymin=Min, ymax=Max, x=NumericDate,
text = paste("Date:",Date,"<br>Min:",round(Min),"<br>Max:",round(Max)), group=1),
alpha = 0.3) +
geom_point(aes(x=NumericDDates, y=Deaths, text = paste("Date:",Date,"<br>Deaths:",round(Deaths))  )) +
guides(fill = guide_legend(''), colour = guide_legend(''), linetype = guide_legend('')) +
labs(x="Date", y="Cumulative Lab-Confirmed Deaths") #+ theme_bw() #+ theme_classic()
ggplotly(deathplot,tooltip = c("text")) %>%
layout(legend = list(x = 0.05, y = 0.9,
orientation = "h"),
xaxis = list(
type = 'date',
tickformat = "%b %d"
)
)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
library(ggplot2)
library(plotly)
library(plyr)
library(readr)
library(deSolve)
library(flexdashboard)
library (shiny)
load('Workspace2020-04-25-1587832621.RData')
# Convert times to date format for convenience
dates = startdate + ftimes
casedates = startdate + times
lastdate = tail(casedates,1)
# Turn off scientific notation on all axes (set scipen to 0 to enable scientific notation)
options(scipen=999)
# Convert dates from ggplot numeric to plotly numeric
dt = function(dates){as.numeric(as.POSIXct(dates))*1000}
#Calculate bounds
index= likesample<quantile(likesample,0.95)
ymin = apply(yobsincsample[,index], 1, min)
ymax = apply(yobsincsample[,index], 1, max)
ymed = apply(yobsincsample[,index], 1, median)
deathmin = apply(yobsdeathsample[,index], 1, min)
deathmax = apply(yobsdeathsample[,index], 1, max)
deathmed = apply(yobsdeathsample[,index], 1, median)
ICUmin = apply(ycurrICUsample[,index], 1, min)
ICUmax = apply(ycurrICUsample[,index], 1, max)
ICUmed = apply(ycurrICUsample[,index], 1, median)
O2min = apply(ycurrO2sample[,index], 1, min)
O2max = apply(ycurrO2sample[,index], 1, max)
O2med = apply(ycurrO2sample[,index], 1, median)
patmin = apply(ycurrpatsample[,index], 1, min)
patmax = apply(ycurrpatsample[,index], 1, max)
patmed = apply(ycurrpatsample[,index], 1, median)
ventmin = apply(ycurrventsample[,index], 1, min)
ventmax = apply(ycurrventsample[,index], 1, max)
ventmed = apply(ycurrventsample[,index], 1, median)
xestlh = ode(x0(paramestslh), ftimes, CoVode, paramestslh)
# Detected/observed cumulative incidence
end = (lastdate + 7) - startdate + 1
ybestfit = yobscumcarefun(xestlh, paramestslh)
plotdata = data.frame(dates[1:end],dt(dates[1:end]),ybestfit[1:end],ymed[1:end],ymin[1:end],ymax[1:end],
c(casedates, rep(NA, length(ftimes[1:end]) - length(casedates))),
dt(c(casedates, rep(NA, length(ftimes[1:end]) - length(casedates)))),
c(cases, rep(NA, length(ftimes[1:end]) - length(casedates))) )
colnames(plotdata) = cbind("Date","NumericDate","BestFit","Median","Min","Max","CDates","NumericCDates","Cases")
# I think something here is causing there to be a CssUnit error
forecastplot = ggplot(plotdata) +
geom_line(aes(x=NumericDate,y=BestFit, text = paste("Date:",Date,"<br>Best fit:",round(BestFit)), group=1,
linetype = "Best fit")) +
geom_line(aes(x=NumericDate,y=Median, text = paste("Date:",Date,"<br>Median:",round(Median)), group=1,
linetype = "Median")) +
geom_ribbon(aes(ymin=Min, ymax=Max, x=NumericDate,
text = paste("Date:",Date,"<br>Min:",round(Min),"<br>Max:",round(Max)), group=1),
alpha = 0.3) +
geom_point(aes(x=NumericCDates, y=Cases, text = paste("Date:",Date,"<br>Cases:",round(Cases))  )) +
guides(fill = guide_legend(''), colour = guide_legend(''), linetype = guide_legend('')) +
labs(x="Date", y="Cumulative Lab-Confirmed Cases")
ggplotly(forecastplot,tooltip = c("text")) %>%
layout(legend = list(x = 0.05, y = 0.9,
orientation = "h"),
xaxis = list(
type = 'date',
tickformat = "%b %d"
)
)
forecasttable = c()
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+7, "%B %e"),'(1 week)'),
format(round_any(ymin[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 7) - startdate + 1],1), scientific=F) ) )
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+21, "%B %e"),'(3 weeks)'),
format(round_any(ymin[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 21) - startdate + 1],1), scientific=F) ) )
forecasttable = as.data.frame(forecasttable)
colnames(forecasttable) = c("Date", "Uncertainty lower bound", "Best-fit", "Uncertainty upper bound")
knitr::kable(forecasttable)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
library(ggplot2)
library(plotly)
library(plyr)
library(readr)
library(deSolve)
library(flexdashboard)
library (shiny)
load('Workspace2020-04-25-1587832621.RData')
# Convert times to date format for convenience
dates = startdate + ftimes
casedates = startdate + times
lastdate = tail(casedates,1)
# Turn off scientific notation on all axes (set scipen to 0 to enable scientific notation)
options(scipen=999)
# Convert dates from ggplot numeric to plotly numeric
dt = function(dates){as.numeric(as.POSIXct(dates))*1000}
#Calculate bounds
index= likesample<quantile(likesample,0.95)
ymin = apply(yobsincsample[,index], 1, min)
ymax = apply(yobsincsample[,index], 1, max)
ymed = apply(yobsincsample[,index], 1, median)
deathmin = apply(yobsdeathsample[,index], 1, min)
deathmax = apply(yobsdeathsample[,index], 1, max)
deathmed = apply(yobsdeathsample[,index], 1, median)
ICUmin = apply(ycurrICUsample[,index], 1, min)
ICUmax = apply(ycurrICUsample[,index], 1, max)
ICUmed = apply(ycurrICUsample[,index], 1, median)
O2min = apply(ycurrO2sample[,index], 1, min)
O2max = apply(ycurrO2sample[,index], 1, max)
O2med = apply(ycurrO2sample[,index], 1, median)
patmin = apply(ycurrpatsample[,index], 1, min)
patmax = apply(ycurrpatsample[,index], 1, max)
patmed = apply(ycurrpatsample[,index], 1, median)
ventmin = apply(ycurrventsample[,index], 1, min)
ventmax = apply(ycurrventsample[,index], 1, max)
ventmed = apply(ycurrventsample[,index], 1, median)
xestlh = ode(x0(paramestslh), ftimes, CoVode, paramestslh)
# Detected/observed cumulative incidence
end = (lastdate + 7) - startdate + 1
ybestfit = yobscumcarefun(xestlh, paramestslh)
plotdata = data.frame(dates[1:end],dt(dates[1:end]),ybestfit[1:end],ymed[1:end],ymin[1:end],ymax[1:end],
c(casedates, rep(NA, length(ftimes[1:end]) - length(casedates))),
dt(c(casedates, rep(NA, length(ftimes[1:end]) - length(casedates)))),
c(cases, rep(NA, length(ftimes[1:end]) - length(casedates))) )
colnames(plotdata) = cbind("Date","NumericDate","BestFit","Median","Min","Max","CDates","NumericCDates","Cases")
forecastplot = ggplot(plotdata) +
geom_line(aes(x=NumericDate,y=BestFit, text = paste("Date:",Date,"<br>Best fit:",round(BestFit)), group=1,
linetype = "Best fit")) +
geom_line(aes(x=NumericDate,y=Median, text = paste("Date:",Date,"<br>Median:",round(Median)), group=1,
linetype = "Median")) +
geom_ribbon(aes(ymin=Min, ymax=Max, x=NumericDate,
text = paste("Date:",Date,"<br>Min:",round(Min),"<br>Max:",round(Max)), group=1),
alpha = 0.3) +
geom_point(aes(x=NumericCDates, y=Cases, text = paste("Date:",Date,"<br>Cases:",round(Cases))  )) +
guides(fill = guide_legend(''), colour = guide_legend(''), linetype = guide_legend('')) +
labs(x="Date", y="Cumulative Lab-Confirmed Cases")
# ggplotly(forecastplot, tooltip = c("text")) %>%
#   layout(legend = list(x = 0.05, y = 0.9,
#       orientation = "h"),
#       xaxis = list(
#         type = 'date',
#         tickformat = "%b %d"
#         )
#   )
renderPlot(ggplotly(forecastplot, tooltip = c("text")) %>%
layout(legend = list(x = 0.05, y = 0.9,
orientation = "h"),
xaxis = list(
type = 'date',
tickformat = "%b %d"
)
), width = "auto", height = "auto" )
forecasttable = c()
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+7, "%B %e"),'(1 week)'),
format(round_any(ymin[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 7) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 7) - startdate + 1],1), scientific=F) ) )
forecasttable = rbind(forecasttable,
c(paste(format(lastdate+21, "%B %e"),'(3 weeks)'),
format(round_any(ymin[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(yobscumcarefun(xestlh,paramestslh)[(lastdate + 21) - startdate + 1],1), scientific=F),
format(round_any(ymax[(lastdate + 21) - startdate + 1],1), scientific=F) ) )
forecasttable = as.data.frame(forecasttable)
colnames(forecasttable) = c("Date", "Uncertainty lower bound", "Best-fit", "Uncertainty upper bound")
knitr::kable(forecasttable)
rmarkdown::render_site()
update.packages("flexdashboard")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("plotly")
install.packages("plotly")
rmarkdown::render_site()
installr:install.packages("isntallr")
